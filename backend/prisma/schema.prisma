generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int                         @id @default(autoincrement())
  email          String                      @unique
  password       String
  name           String?
  profileImage   String?
  createdAt      DateTime                    @default(now())
  updatedAt      DateTime                    @updatedAt
  skills         String[]                 
  causes         String[]                
  // Relations
  comments       Comment[]
  events         Event[]                     @relation("EventParticipants")
  createdEvents  Event[]                     @relation("EventCreator")
  volunteerHours VolunteerHour[]
  verifierHours  VolunteerHourVerification[]
  helpRequests   HelpRequest[]
  offeredHelp    HelpRequestHelper[]  
}




model Comment {
  id            Int         @id @default(autoincrement())
  content       String
  createdAt     DateTime    @default(now())
  helpRequestId Int
  helpRequest   HelpRequest @relation(fields: [helpRequestId], references: [id])
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
}

model Team {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]  @relation("TeamEvents")
}

model Event {
  id              Int             @id @default(autoincrement())
  title           String
  description     String
  eventImage      String?
  dateTime        DateTime
  location        String
  maxParticipants Int             @default(30)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  creatorId       Int
  creator         User            @relation("EventCreator", fields: [creatorId], references: [id])
  participants    User[]          @relation("EventParticipants")
  teams           Team[]          @relation("TeamEvents")
  volunteerHours  VolunteerHour[]
  categoryId      Int
  category        Category        @relation(fields: [categoryId], references: [id])
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  events Event[]
}

model VolunteerHour {
  id         Int                         @id @default(autoincrement())
  hours      Float // Number of hours volunteered
  date       DateTime                    @default(now())
  isVerified Boolean                     @default(false)
  verifiedBy VolunteerHourVerification[]
  userId     Int
  user       User                        @relation(fields: [userId], references: [id])
  eventId    Int? // ID of the event (if applicable)
  event      Event?                      @relation(fields: [eventId], references: [id]) // Add the relation to Event
}

model VolunteerHourVerification {
  id              Int           @id @default(autoincrement())
  volunteerHourId Int
  verifierId      Int
  volunteerHour   VolunteerHour @relation(fields: [volunteerHourId], references: [id])
  verifier        User          @relation(fields: [verifierId], references: [id])
}

model HelpRequest {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  imageUrl    String?
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  comments    Comment[]
  urgency     String        @default("medium") // New field: urgency level (low, medium, urgent)
  helpers     HelpRequestHelper[] // New relation: who offered help
  createdAt   DateTime      @default(now())    // Timestamp for sorting requests
}

model HelpRequestHelper {
  id            Int         @id @default(autoincrement())
  userId        Int
  helpRequestId Int
  user          User        @relation(fields: [userId], references: [id])
  helpRequest   HelpRequest @relation(fields: [helpRequestId], references: [id])
  createdAt     DateTime    @default(now()) // When the user offered help
}
